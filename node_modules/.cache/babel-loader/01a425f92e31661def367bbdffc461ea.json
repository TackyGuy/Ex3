{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/yoman/OneDrive/Bureau/pvt-ex3-firestore-main/pvt-ex3-firestore-main/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/yoman/OneDrive/Bureau/pvt-ex3-firestore-main/pvt-ex3-firestore-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/yoman/OneDrive/Bureau/pvt-ex3-firestore-main/pvt-ex3-firestore-main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import'./ListeProduits.scss';import Produit from\"./Produit\";import{useEffect,useState}from'react';/******* Ex#3 - Étape D ********************************/ // Importer l'objet bd du fichier firebase.js\nimport bd from'../data/firebase';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ListeProduits(props){/******* Ex#3 - Étape E ********************************/ // Créer un \"état\" React pour les produits (utiliser useState)\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),produits=_useState2[0],setProduits=_useState2[1];useEffect(function(){function getProduits(){return _getProduits.apply(this,arguments);}function _getProduits(){_getProduits=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tabProduits;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// On initialise un tableau pour contenir les produits extraits de Firestore\ntabProduits=[];/******* Ex#3 - Étape F ********************************/ // Faire une requête à la collection de produits sur Firestore et remplir les tableau tabProduits avec les données de produits retournées par Firestore\n// [Suggestion : remarquez que la fonction getProduits() est marquée 'async'. Lorsque vous appelez la méthode Firestore qui retourne les produits, cette fonction \n// est une Promesse, vous pouvez simplement utiliser la syntax 'await' pour attendre le résultat avant de remplir le tableau tabProduits \n// (visionnez la capsule au sujet du code asynchrone en JavaScript)]\n_context.next=3;return bd.collection(\"ex3-produits\").get().then(function(rep){return rep.forEach(function(element){return tabProduits.push(element.data());});});case 3://console.log(tabProduits);\n/******* Ex#3 - Étape G ********************************/ // Modifier l'état des produits (initialisé ci-dessus avec useState) en utilisant le mutateur et le tableau tabProduits\nsetProduits(tabProduits);case 4:case\"end\":return _context.stop();}}},_callee);}));return _getProduits.apply(this,arguments);}getProduits();},[]);// Ne modifiez surtout pas le tableau des dépendances à gauche : vous risquez un appel récurent sans fin de l'API Firebase !!!!\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"ListeProduits\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Produits disponibles\"}),/*#__PURE__*/_jsx(\"ul\",{children:produits.map(function(produit){return/*#__PURE__*/_jsx(Produit,{etatPanier:props.etatPanier,id:produit.id,nom:produit.nom,prix:produit.prix},produit.id);})})]});}","map":{"version":3,"sources":["C:/Users/yoman/OneDrive/Bureau/pvt-ex3-firestore-main/pvt-ex3-firestore-main/src/composants/ListeProduits.jsx"],"names":["Produit","useEffect","useState","bd","ListeProduits","props","produits","setProduits","getProduits","tabProduits","collection","get","then","rep","forEach","element","push","data","map","produit","etatPanier","id","nom","prix"],"mappings":"0dAAA,MAAO,sBAAP,CACA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,yD,CACA;AACA,MAAOC,CAAAA,EAAP,KAAe,kBAAf,C,wFAEA,cAAe,SAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,CAC3C,yDAD2C,CAE3C;AAF2C,cAGXH,QAAQ,CAAC,EAAD,CAHG,wCAGpCI,QAHoC,eAG1BC,WAH0B,eAK3CN,SAAS,CAAC,UAAM,SACCO,CAAAA,WADD,2IACd,mJACE;AACMC,WAFR,CAEsB,EAFtB,CAIE,yDAJF,CAKE;AACA;AACA;AACA;AARF,sBASQN,CAAAA,EAAE,CAACO,UAAH,CAAc,cAAd,EAA8BC,GAA9B,GAAoCC,IAApC,CACJ,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,OAAJ,CAAY,SAAAC,OAAO,QAAIN,CAAAA,WAAW,CAACO,IAAZ,CAAiBD,OAAO,CAACE,IAAR,EAAjB,CAAJ,EAAnB,CAAJ,EADC,CATR,QAYE;AAEA,yDAdF,CAeE;AACAV,WAAW,CAACE,WAAD,CAAX,CAhBF,sDADc,8CAmBdD,WAAW,GACZ,CApBQ,CAoBN,EApBM,CAAT,CAoBQ;AAER,mBACE,aAAK,SAAS,CAAC,eAAf,wBACE,4CADF,cAEE,oBASGF,QAAQ,CAACY,GAAT,CAAa,SAAAC,OAAO,qBAAI,KAAC,OAAD,EAAS,UAAU,CAAEd,KAAK,CAACe,UAA3B,CAAwD,EAAE,CAAED,OAAO,CAACE,EAApE,CAAwE,GAAG,CAAEF,OAAO,CAACG,GAArF,CAA0F,IAAI,CAAEH,OAAO,CAACI,IAAxG,EAA4CJ,OAAO,CAACE,EAApD,CAAJ,EAApB,CATH,EAFF,GADF,CAgBD","sourcesContent":["import './ListeProduits.scss';\nimport Produit from \"./Produit\";\nimport { useEffect, useState } from 'react';\n/******* Ex#3 - Étape D ********************************/ \n// Importer l'objet bd du fichier firebase.js\nimport bd from '../data/firebase';\n\nexport default function ListeProduits(props) {\n  /******* Ex#3 - Étape E ********************************/ \n  // Créer un \"état\" React pour les produits (utiliser useState)\n  const [produits, setProduits] = useState([]);\n    \n  useEffect(() => {\n    async function getProduits() {\n      // On initialise un tableau pour contenir les produits extraits de Firestore\n      const tabProduits = [];\n      \n      /******* Ex#3 - Étape F ********************************/ \n      // Faire une requête à la collection de produits sur Firestore et remplir les tableau tabProduits avec les données de produits retournées par Firestore\n      // [Suggestion : remarquez que la fonction getProduits() est marquée 'async'. Lorsque vous appelez la méthode Firestore qui retourne les produits, cette fonction \n      // est une Promesse, vous pouvez simplement utiliser la syntax 'await' pour attendre le résultat avant de remplir le tableau tabProduits \n      // (visionnez la capsule au sujet du code asynchrone en JavaScript)]\n      await bd.collection(\"ex3-produits\").get().then(\n        rep => rep.forEach(element => tabProduits.push(element.data()))\n      )\n      //console.log(tabProduits);\n      \n      /******* Ex#3 - Étape G ********************************/ \n      // Modifier l'état des produits (initialisé ci-dessus avec useState) en utilisant le mutateur et le tableau tabProduits\n      setProduits(tabProduits);\n    }\n    getProduits();\n  }, []); // Ne modifiez surtout pas le tableau des dépendances à gauche : vous risquez un appel récurent sans fin de l'API Firebase !!!!\n\n  return (\n    <div className=\"ListeProduits\">\n      <h2>Produits disponibles</h2>\n      <ul>        \n        {/*\n          ******* Ex#3 - Étape H ******************************** \n          Utiliser la variable d'état des produits pour générer les composants 'Produit' ci-dessous.\n          Remarque : Vous pouvez reproduire la solution déjà faite en classe (c'est un trivial copier-coller).\n          Attention : les composants Produit s'attendent à recevoir l'état du panier dans leurs props, donc vous devez\n          avoir l'attribut \"etatPanier={props.etatPanier}\" quand vous les générer ici : encore une fois, regardez \n          le code de l'exercice de classe.\n        */}\n        {produits.map(produit => <Produit etatPanier={props.etatPanier} key={produit.id} id={produit.id} nom={produit.nom} prix={produit.prix}/>)}\n      </ul>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}